import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, List
import json
import os
from dataclasses import dataclass, asdict
from enum import Enum

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    KeyboardButton, 
    ReplyKeyboardMarkup,
    InputMediaPhoto,
    FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "8181220707:AAHt03llUwCNthyHDqbAwFz3X7oagdHagDM"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_IDS = [1353229675]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    selecting_category = State()
    selecting_item = State()
    entering_quantity = State()
    entering_address = State()
    entering_phone = State()
    confirming_order = State()

class AdminStates(StatesGroup):
    add_item_name = State()
    add_item_desc = State()
    add_item_price = State()
    add_item_image = State()
    add_item_category = State()
    edit_item = State()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
@dataclass
class MenuItem:
    id: int
    name: str
    description: str
    price: float
    category: str
    image_url: str = ""
    available: bool = True

@dataclass
class OrderItem:
    menu_item: MenuItem
    quantity: int
    
    @property
    def total_price(self) -> float:
        return self.menu_item.price * self.quantity

@dataclass
class Order:
    user_id: int
    username: str
    items: List[OrderItem]
    address: str
    phone: str
    payment_method: str
    total_amount: float
    order_time: str
    status: str = "pending"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
class DataStorage:
    def __init__(self):
        self.menu_items: List[MenuItem] = []
        self.orders: List[Order] = []
        self.user_carts: Dict[int, List[OrderItem]] = {}
        self.load_default_menu()
    
    def load_default_menu(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é"""
        default_items = [
            MenuItem(1, "üçï –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∏—Ü—Ü–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏, –º–æ—Ü–∞—Ä–µ–ª–ª–æ–π –∏ –±–∞–∑–∏–ª–∏–∫–æ–º", 850, "üçï –ü–∏—Ü—Ü–∞", "https://via.placeholder.com/400x300/FF6347/FFFFFF?text=–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"),
            MenuItem(2, "üçï –ü–µ–ø–ø–µ—Ä–æ–Ω–∏", "–ü–∏—Ü—Ü–∞ —Å –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∏ —Å—ã—Ä–æ–º –º–æ—Ü–∞—Ä–µ–ª–ª–∞", 950, "üçï –ü–∏—Ü—Ü–∞", "https://via.placeholder.com/400x300/FF4500/FFFFFF?text=–ü–µ–ø–ø–µ—Ä–æ–Ω–∏"),
            MenuItem(3, "üçî –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–°–æ—á–Ω—ã–π –±—É—Ä–≥–µ—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π, —Å–∞–ª–∞—Ç–æ–º –∏ —Ç–æ–º–∞—Ç–æ–º", 650, "üçî –ë—É—Ä–≥–µ—Ä—ã", "https://via.placeholder.com/400x300/8B4513/FFFFFF?text=–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π+–ë—É—Ä–≥–µ—Ä"),
            MenuItem(4, "üçî –ß–∏–∑–±—É—Ä–≥–µ—Ä", "–ë—É—Ä–≥–µ—Ä —Å –¥–≤–æ–π–Ω—ã–º —Å—ã—Ä–æ–º –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–æ—É—Å–æ–º", 720, "üçî –ë—É—Ä–≥–µ—Ä—ã", "https://via.placeholder.com/400x300/FFD700/000000?text=–ß–∏–∑–±—É—Ä–≥–µ—Ä"),
            MenuItem(5, "üçú –ë–æ—Ä—â", "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –±–æ—Ä—â —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π", 450, "üçú –°—É–ø—ã", "https://via.placeholder.com/400x300/DC143C/FFFFFF?text=–ë–æ—Ä—â"),
            MenuItem(6, "üçú –°–æ–ª—è–Ω–∫–∞", "–ú—è—Å–Ω–∞—è —Å–æ–ª—è–Ω–∫–∞ —Å –æ–ª–∏–≤–∫–∞–º–∏ –∏ –ª–∏–º–æ–Ω–æ–º", 520, "üçú –°—É–ø—ã", "https://via.placeholder.com/400x300/B22222/FFFFFF?text=–°–æ–ª—è–Ω–∫–∞"),
            MenuItem(7, "ü•ó –¶–µ–∑–∞—Ä—å", "–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π, –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º –∏ —Å–æ—É—Å–æ–º —Ü–µ–∑–∞—Ä—å", 680, "ü•ó –°–∞–ª–∞—Ç—ã", "https://via.placeholder.com/400x300/32CD32/FFFFFF?text=–¶–µ–∑–∞—Ä—å"),
            MenuItem(8, "ü•ó –ì—Ä–µ—á–µ—Å–∫–∏–π", "–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç —Å —Ñ–µ—Ç–æ–π, –æ–ª–∏–≤–∫–∞–º–∏ –∏ –æ–≤–æ—â–∞–º–∏", 580, "ü•ó –°–∞–ª–∞—Ç—ã", "https://via.placeholder.com/400x300/228B22/FFFFFF?text=–ì—Ä–µ—á–µ—Å–∫–∏–π"),
            MenuItem(9, "‚òï –≠—Å–ø—Ä–µ—Å—Å–æ", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –∫–æ—Ñ–µ", 180, "‚òï –ù–∞–ø–∏—Ç–∫–∏", "https://via.placeholder.com/400x300/8B4513/FFFFFF?text=–≠—Å–ø—Ä–µ—Å—Å–æ"),
            MenuItem(10, "üßÉ –°–≤–µ–∂–µ–≤—ã–∂–∞—Ç—ã–π —Å–æ–∫", "–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", 250, "‚òï –ù–∞–ø–∏—Ç–∫–∏", "https://via.placeholder.com/400x300/FF8C00/FFFFFF?text=–°–æ–∫"),
        ]
        self.menu_items = default_items
    
    def get_categories(self) -> List[str]:
        return list(set(item.category for item in self.menu_items if item.available))
    
    def get_items_by_category(self, category: str) -> List[MenuItem]:
        return [item for item in self.menu_items if item.category == category and item.available]
    
    def get_item_by_id(self, item_id: int) -> MenuItem:
        return next((item for item in self.menu_items if item.id == item_id), None)
    
    def add_item(self, item: MenuItem):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
        max_id = max([item.id for item in self.menu_items], default=0)
        item.id = max_id + 1
        self.menu_items.append(item)
    
    def update_item(self, item: MenuItem):
        for i, existing_item in enumerate(self.menu_items):
            if existing_item.id == item.id:
                self.menu_items[i] = item
                break
    
    def delete_item(self, item_id: int):
        self.menu_items = [item for item in self.menu_items if item.id != item_id]
    
    def add_to_cart(self, user_id: int, item: MenuItem, quantity: int):
        if user_id not in self.user_carts:
            self.user_carts[user_id] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        for cart_item in self.user_carts[user_id]:
            if cart_item.menu_item.id == item.id:
                cart_item.quantity += quantity
                return
        
        self.user_carts[user_id].append(OrderItem(item, quantity))
    
    def get_cart(self, user_id: int) -> List[OrderItem]:
        return self.user_carts.get(user_id, [])
    
    def clear_cart(self, user_id: int):
        if user_id in self.user_carts:
            self.user_carts[user_id] = []
    
    def remove_from_cart(self, user_id: int, item_id: int):
        if user_id in self.user_carts:
            self.user_carts[user_id] = [
                item for item in self.user_carts[user_id] 
                if item.menu_item.id != item_id
            ]
    
    def save_order(self, order: Order):
        self.orders.append(order)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
storage = DataStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üçΩÔ∏è –ú–µ–Ω—é", callback_data="menu"),
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")
    )
    builder.row(
        InlineKeyboardButton(text="‚ÑπÔ∏è –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ", callback_data="about"),
        InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    return builder.as_markup()

def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="admin_add_item"),
        InlineKeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", callback_data="admin_menu")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –ó–∞–∫–∞–∑—ã", callback_data="admin_orders"),
        InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return builder.as_markup()

def get_categories_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    builder = InlineKeyboardBuilder()
    categories = storage.get_categories()
    for category in categories:
        builder.row(InlineKeyboardButton(text=category, callback_data=f"category_{category}"))
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
    return builder.as_markup()

def get_items_keyboard(category: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–ª—é–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    builder = InlineKeyboardBuilder()
    items = storage.get_items_by_category(category)
    for item in items:
        builder.row(InlineKeyboardButton(
            text=f"{item.name} - {item.price}‚ÇΩ", 
            callback_data=f"item_{item.id}"
        ))
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="menu"))
    return builder.as_markup()

def get_item_keyboard(item_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª—é–¥–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{item_id}"),
    )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="menu"))
    return builder.as_markup()

def get_quantity_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    builder = InlineKeyboardBuilder()
    for i in range(1, 6):
        builder.add(InlineKeyboardButton(text=str(i), callback_data=f"quantity_{i}"))
    builder.adjust(5)
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="menu"))
    return builder.as_markup()

def get_cart_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    builder = InlineKeyboardBuilder()
    cart = storage.get_cart(user_id)
    
    if cart:
        for item in cart:
            builder.row(InlineKeyboardButton(
                text=f"‚ùå {item.menu_item.name} ({item.quantity}—à—Ç.)",
                callback_data=f"remove_from_cart_{item.menu_item.id}"
            ))
        builder.row(
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
            InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        )
    
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    return builder.as_markup()

def get_payment_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–æ–π", callback_data="payment_card"),
        InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏", callback_data="payment_cash")
    )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cart"))
    return builder.as_markup()

def get_admin_menu_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    builder = InlineKeyboardBuilder()
    categories = storage.get_categories()
    for category in categories:
        builder.row(InlineKeyboardButton(
            text=f"üìù {category}", 
            callback_data=f"admin_category_{category}"
        ))
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    return builder.as_markup()

def get_admin_items_keyboard(category: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–ª—é–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    builder = InlineKeyboardBuilder()
    items = storage.get_items_by_category(category)
    for item in items:
        builder.row(InlineKeyboardButton(
            text=f"‚úèÔ∏è {item.name}", 
            callback_data=f"admin_edit_item_{item.id}"
        ))
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="admin_menu"))
    return builder.as_markup()

def get_edit_item_keyboard(item_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_item_{item_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_item_{item_id}")
    )
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"))
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = """üçΩÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω!</b>

–ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏! 
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:

üçï –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–µ –≤–∫—É—Å–Ω–µ–π—à–µ–µ –º–µ–Ω—é
üõí –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É  
üìû –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
üí≥ –í—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

<i>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!</i> ‚ú®"""
    
    await message.answer(
        welcome_text, 
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    admin_text = """üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º:

‚ûï –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –±–ª—é–¥–∞
üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã
üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""

    await message.answer(
        admin_text,
        reply_markup=get_admin_keyboard(),
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = """üçΩÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"""
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data == "menu")
async def show_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é"""
    await state.set_state(OrderStates.selecting_category)
    
    menu_text = """üçΩÔ∏è <b>–ù–∞—à–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥:"""
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=get_categories_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("category_"))
async def show_category_items(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–ª—é–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("category_")[1]
    await state.update_data(selected_category=category)
    await state.set_state(OrderStates.selecting_item)
    
    items = storage.get_items_by_category(category)
    if not items:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥!", show_alert=True)
        return
    
    category_text = f"""üçΩÔ∏è <b>{category}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:"""
    
    await callback.message.edit_text(
        category_text,
        reply_markup=get_items_keyboard(category),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("item_"))
async def show_item_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –±–ª—é–¥–∞"""
    item_id = int(callback.data.split("item_")[1])
    item = storage.get_item_by_id(item_id)
    
    if not item:
        await callback.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    item_text = f"""üçΩÔ∏è <b>{item.name}</b>

üìù <i>{item.description}</i>

üí∞ <b>–¶–µ–Ω–∞: {item.price}‚ÇΩ</b>

{'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if item.available else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}"""
    
    try:
        await callback.message.delete()
        if item.image_url:
            await callback.message.answer_photo(
                photo=item.image_url,
                caption=item_text,
                reply_markup=get_item_keyboard(item_id),
                parse_mode='HTML'
            )
        else:
            await callback.message.answer(
                item_text,
                reply_markup=get_item_keyboard(item_id),
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await callback.message.answer(
            item_text,
            reply_markup=get_item_keyboard(item_id),
            parse_mode='HTML'
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É - –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    item_id = int(callback.data.split("add_to_cart_")[1])
    await state.update_data(selected_item_id=item_id)
    await state.set_state(OrderStates.entering_quantity)
    
    quantity_text = """üõí <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"""
    
    await callback.message.edit_text(
        quantity_text,
        reply_markup=get_quantity_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("quantity_"))
async def process_quantity(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
    quantity = int(callback.data.split("quantity_")[1])
    data = await state.get_data()
    item_id = data.get('selected_item_id')
    
    item = storage.get_item_by_id(item_id)
    if not item:
        await callback.answer("–û—à–∏–±–∫–∞! –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    storage.add_to_cart(callback.from_user.id, item, quantity)
    
    success_text = f"""‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!</b>

üçΩÔ∏è {item.name}
üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}
üí∞ –°—É–º–º–∞: {item.price * quantity}‚ÇΩ

–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?"""
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart"),
        InlineKeyboardButton(text="üçΩÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="menu")
    )
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback.message.edit_text(
        success_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )
    await callback.answer()
    await state.clear()

@dp.callback_query(F.data == "cart")
async def show_cart(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    cart = storage.get_cart(callback.from_user.id)
    
    if not cart:
        empty_text = """üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>

–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –º–µ–Ω—é!"""
        
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="üçΩÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ–Ω—é", callback_data="menu"))
        builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        await callback.message.edit_text(
            empty_text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )
    else:
        total = sum(item.total_price for item in cart)
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        
        for item in cart:
            cart_text += f"üçΩÔ∏è <b>{item.menu_item.name}</b>\n"
            cart_text += f"   üí∞ {item.menu_item.price}‚ÇΩ √ó {item.quantity} = {item.total_price}‚ÇΩ\n\n"
        
        cart_text += f"üí≥ <b>–û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ</b>"
        
        await callback.message.edit_text(
            cart_text,
            reply_markup=get_cart_keyboard(callback.from_user.id),
            parse_mode='HTML'
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("remove_from_cart_"))
async def remove_from_cart(callback: types.CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    item_id = int(callback.data.split("remove_from_cart_")[1])
    storage.remove_from_cart(callback.from_user.id, item_id)
    
    await show_cart(callback)
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!")

@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    storage.clear_cart(callback.from_user.id)
    await show_cart(callback)
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

@dp.callback_query(F.data == "checkout")
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    cart = storage.get_cart(callback.from_user.id)
    
    if not cart:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        return
    
    await state.set_state(OrderStates.entering_address)
    
    address_text = """üìç <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>

–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:
<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 10, –∫–≤. 5)</i>"""
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="cart"))
    
    await callback.message.edit_text(
        address_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message(StateFilter(OrderStates.entering_address))
async def process_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–¥—Ä–µ—Å"""
    await state.update_data(address=message.text)
    await state.set_state(OrderStates.entering_phone)
    
    phone_text = """üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω</b>

–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 (900) 123-45-67)</i>"""
    
    await message.answer(phone_text, parse_mode='HTML')

@dp.message(StateFilter(OrderStates.entering_phone))
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"""
    await state.update_data(phone=message.text)
    
    payment_text = """üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"""
    
    await message.answer(
        payment_text,
        reply_markup=get_payment_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query(F.data.startswith("payment_"))
async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"""
    payment_method = "–ö–∞—Ä—Ç–æ–π" if callback.data == "payment_card" else "–ù–∞–ª–∏—á–Ω—ã–º–∏"
    await state.update_data(payment_method=payment_method)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    cart = storage.get_cart(callback.from_user.id)
    total = sum(item.total_price for item in cart)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    confirmation_text = f"""‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>

üë§ <b>–ó–∞–∫–∞–∑—á–∏–∫:</b> @{callback.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {payment_method}

üìã <b>–í–∞—à –∑–∞–∫–∞–∑:</b>
"""
    
    for item in cart:
        confirmation_text += f"‚Ä¢ {item.menu_item.name} √ó {item.quantity} = {item.total_price}‚ÇΩ\n"
    
    confirmation_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>\n\n‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 30-45 –º–∏–Ω—É—Ç"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cart")
    )
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"""
    data = await state.get_data()
    cart = storage.get_cart(callback.from_user.id)
    total = sum(item.total_price for item in cart)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order = Order(
        user_id=callback.from_user.id,
        username=callback.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
        items=cart.copy(),
        address=data['address'],
        phone=data['phone'],
        payment_method=data['payment_method'],
        total_amount=total,
        order_time=datetime.now().strftime("%d.%m.%Y %H:%M")
    )
    
    storage.save_order(order)
    storage.clear_cart(callback.from_user.id)
    
    success_text = f"""üéâ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>

üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> #{len(storage.orders)}
üí∞ <b>–°—É–º–º–∞:</b> {total}‚ÇΩ
‚è∞ <b>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> 30-45 –º–∏–Ω—É—Ç

–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

<i>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!</i> üçΩÔ∏è"""
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback.message.edit_text(
        success_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    admin_notification = f"""üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>

üìã <b>–ó–∞–∫–∞–∑ #{len(storage.orders)}</b>
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{order.username}
üìç <b>–ê–¥—Ä–µ—Å:</b> {order.address}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.phone}
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> {order.payment_method}
‚è∞ <b>–í—Ä–µ–º—è:</b> {order.order_time}

üìã <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
"""
    
    for item in order.items:
        admin_notification += f"‚Ä¢ {item.menu_item.name} √ó {item.quantity} = {item.total_price}‚ÇΩ\n"
    
    admin_notification += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {order.total_amount}‚ÇΩ</b>"
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, admin_notification, parse_mode='HTML')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    await callback.answer()
    await state.clear()

@dp.callback_query(F.data == "about")
async def show_about(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ"""
    about_text = """‚ÑπÔ∏è <b>–û –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ</b>

üçΩÔ∏è <b>"–í–∫—É—Å–Ω–æ–µ –º–µ—Å—Ç–æ"</b> - —ç—Ç–æ —É—é—Ç–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –≥–¥–µ –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ –≥–æ—Ç–æ–≤–∏—Ç—Å—è —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π –æ –Ω–∞—à–∏—Ö –≥–æ—Å—Ç—è—Ö.

üåü <b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –°–≤–µ–∂–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ (30-45 –º–∏–Ω—É—Ç)
‚Ä¢ –ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –±–ª—é–¥ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª

‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 23:00

üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>
–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 1000‚ÇΩ
–ü–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ - 200‚ÇΩ"""
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback.message.edit_text(
        about_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data == "contacts")
async def show_contacts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    contacts_text = """üìû <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>

üìç <b>–ê–¥—Ä–µ—Å:</b>
–≥. –¢–∞—à–∫–µ–Ω—Ç, —É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞, 15

üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>
+998 90 123-45-67

üìß <b>Email:</b>
info@vkusnoe-mesto.uz

üåê <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b>
@vkusnoe_mesto - Telegram
@vkusnoe.mesto - Instagram

‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
–ü–Ω-–í—Å: 10:00 - 23:00

üó∫Ô∏è <i>–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–∞–º–æ–º —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞!</i>"""
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback.message.edit_text(
        contacts_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )
    await callback.answer()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data == "admin_panel")
async def show_admin_panel(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    admin_text = """üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º:"""
    
    await callback.message.edit_text(
        admin_text,
        reply_markup=get_admin_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_add_item")
async def admin_add_item_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    await state.set_state(AdminStates.add_item_name)
    
    add_text = """‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:"""
    
    await callback.message.edit_text(add_text, parse_mode='HTML')
    await callback.answer()

@dp.message(StateFilter(AdminStates.add_item_name))
async def admin_add_item_name(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"""
    await state.update_data(name=message.text)
    await state.set_state(AdminStates.add_item_desc)
    
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞:")

@dp.message(StateFilter(AdminStates.add_item_desc))
async def admin_add_item_desc(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞"""
    await state.update_data(description=message.text)
    await state.set_state(AdminStates.add_item_price)
    
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message(StateFilter(AdminStates.add_item_price))
async def admin_add_item_price(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –±–ª—é–¥–∞"""
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(AdminStates.add_item_category)
        
        categories = storage.get_categories()
        category_text = f"üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:\n\n"
        category_text += "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
        for cat in categories:
            category_text += f"‚Ä¢ {cat}\n"
        
        await message.answer(category_text)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message(StateFilter(AdminStates.add_item_category))
async def admin_add_item_category(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞"""
    await state.update_data(category=message.text)
    await state.set_state(AdminStates.add_item_image)
    
    await message.answer("üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")

@dp.message(StateFilter(AdminStates.add_item_image))
async def admin_add_item_image(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞"""
    data = await state.get_data()
    
    image_url = ""
    if message.photo:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = "https://via.placeholder.com/400x300/FFB6C1/000000?text=" + data['name']
    elif message.text and message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        image_url = message.text
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –±–ª—é–¥–æ
    new_item = MenuItem(
        id=0,  # ID –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        name=data['name'],
        description=data['description'],
        price=data['price'],
        category=data['category'],
        image_url=image_url
    )
    
    storage.add_item(new_item)
    
    success_text = f"""‚úÖ <b>–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>

üçΩÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {new_item.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {new_item.description}
üí∞ <b>–¶–µ–Ω–∞:</b> {new_item.price}‚ÇΩ
üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {new_item.category}"""
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    await message.answer(
        success_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )
    await state.clear()

@dp.callback_query(F.data == "admin_menu")
async def admin_show_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    menu_text = """üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"""
    
    await callback.message.edit_text(
        menu_text,
        reply_markup=get_admin_menu_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_category_"))
async def admin_show_category_items(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–ª—é–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    category = callback.data.split("admin_category_")[1]
    
    items_text = f"""üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: {category}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"""
    
    await callback.message.edit_text(
        items_text,
        reply_markup=get_admin_items_keyboard(category),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("admin_edit_item_"))
async def admin_edit_item_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    item_id = int(callback.data.split("admin_edit_item_")[1])
    item = storage.get_item_by_id(item_id)
    
    if not item:
        await callback.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    edit_text = f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞</b>

üçΩÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item.name}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {item.description}
üí∞ <b>–¶–µ–Ω–∞:</b> {item.price}‚ÇΩ
üìÅ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {item.category}
{'‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' if item.available else '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}"""
    
    await callback.message.edit_text(
        edit_text,
        reply_markup=get_edit_item_keyboard(item_id),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_item_"))
async def admin_delete_item(callback: types.CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    item_id = int(callback.data.split("delete_item_")[1])
    item = storage.get_item_by_id(item_id)
    
    if not item:
        await callback.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return
    
    storage.delete_item(item_id)
    
    await callback.answer(f"‚úÖ –ë–ª—é–¥–æ '{item.name}' —É–¥–∞–ª–µ–Ω–æ!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
    await admin_show_menu(callback)

@dp.callback_query(F.data == "admin_orders")
async def admin_show_orders(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    orders = storage.orders
    
    if not orders:
        orders_text = """üìä <b>–ó–∞–∫–∞–∑—ã</b>

–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."""
    else:
        orders_text = f"üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã ({len(orders)})</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
        for i, order in enumerate(reversed(orders[-5:]), 1):
            orders_text += f"<b>#{len(orders) - i + 1}</b> @{order.username}\n"
            orders_text += f"üí∞ {order.total_amount}‚ÇΩ | {order.payment_method}\n"
            orders_text += f"‚è∞ {order.order_time} | {order.status}\n\n"
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    await callback.message.edit_text(
        orders_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_stats")
async def admin_show_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    orders = storage.orders
    total_orders = len(orders)
    total_revenue = sum(order.total_amount for order in orders)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = {}
    for order in orders:
        for item in order.items:
            category = item.menu_item.category
            if category not in category_stats:
                category_stats[category] = 0
            category_stats[category] += item.quantity
    
    stats_text = f"""üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue}‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –∑–∞–∫–∞–∑: {total_revenue/max(total_orders, 1):.2f}‚ÇΩ

üçΩÔ∏è <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
"""
    
    for category, count in sorted(category_stats.items(), key=lambda x: x[1], reverse=True):
        stats_text += f"‚Ä¢ {category}: {count} –∑–∞–∫–∞–∑–æ–≤\n"
    
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel"))
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query()
async def unknown_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message()
async def handle_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    help_text = """‚ùì <b>–ü–æ–º–æ—â—å</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.

üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

–î–ª—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üçΩÔ∏è –ú–µ–Ω—é"."""
    
    await message.answer(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode='HTML'
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.set_my_commands([
        types.BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="admin", description="üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")